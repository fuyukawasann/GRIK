# -*- coding: utf-8 -*-
"""test_grik_improved.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15svyi4011wMmKV8hdRN05Tgt4EF2AqlP

# GRIK Test(Improved)

## 1. Import 부분
"""

## 설치 안된 Dependency를 처리하기 위해
import sys
import subprocess

## 파이썬 기본 라이브러리
import os
from PIL import Image
from datetime import datetime
import shutil

## 라이브러리가 없으면 설치를 시도하고 이미 설치되어 있으면 import만 한다.
try:
	import cv2
except:
    # pip 모듈 업그레이드
    subprocess.check_call([sys.executable,'-m', 'pip', 'install', '--upgrade', 'pip'])
    # 에러 발생한 모듈 설치
    subprocess.check_call([sys.executable,'-m', 'pip', 'install', '--upgrade', 'opencv-python'])
    import cv2

try:
    from skimage.metrics import structural_similarity as ssim
except:
    # 에러 발생한 모듈 설치
    subprocess.check_call([sys.executable,'-m', 'pip', 'install', '--upgrade', 'scikit-image'])
    from skimage.metrics import structural_similarity as ssim

"""## 2. 비디오 인식"""

## 비디오 경로
video_Path = input("비디오 경로를 입력하세요: ")

## opencv 비디오 인식
video = cv2.VideoCapture(video_Path)

## 비디오가 없을 때
if not video.isOpened():
    print(f'Cannot open the video: {video_Path}')
    exit(0)

## 비디오 정보
length = int(video.get(cv2.CAP_PROP_FRAME_COUNT))
width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = round(video.get(cv2.CAP_PROP_FPS))

## 디렉토리 생성
save_NAME = input("저장할 이름을 입력해주세요: ")
save_DIR = f'./result/{save_NAME}'
try:
    if not os.path.exists(save_DIR):
        os.makedirs(save_DIR)
except OSError:
    print(f'Error: Cannot Find SAVE_PATH: {save_DIR}')

"""## 3. 비디오 처리 및 기능 구현"""

## Define Frame Counter
frameCounter = 0

## Define SSIM pre-processor
def SSIMProcessor(first, second, thisTurn):
    ## Filtered Gray Scale
    grayA = cv2.cvtColor(first, cv2.COLOR_BGR2GRAY)
    grayB = cv2.cvtColor(second, cv2.COLOR_BGR2GRAY)

    ## Saving Score
    (score, diff) = ssim(grayA, grayB, full=True)
    diff = (diff * 225).astype("uint8")

    ## If Score is larger than 0.87, then delete Primary
    if score < 0.8:
        cv2.imwrite(f'{save_DIR}/frame{thisTurn}.jpg', second)
        print(f'#{thisTurn} Frame Saved!!')


## Video Pre-processing
while(video.isOpened()):
    ret, image = video.read()
    if (int(video.get(1)) % fps == 0):
        if (frameCounter == 0):
            Primary = image
        else :
            Secondary = image
            SSIMProcessor(Primary, Secondary, frameCounter)
            Primary = Secondary
        frameCounter += 1
    if int(video.get(1)) == length:
        break

video.release()

## Remove Video
#os.remove(video_Path)
#print("Eliminate Video!!")

"""## 4. PDF 변환"""

print("=== PDF Generator ===")

file_list = os.listdir(save_DIR)

img_list = []
img_path = f'{save_DIR}/{file_list[0]}'
im_buf = Image.open(img_path)
cvt_rgb_0 = im_buf.convert('RGB')
for i in file_list:
    img_path = f'{save_DIR}/{i}'
    im_buf = Image.open(img_path)
    cvt_rgb = im_buf.convert('RGB')
    img_list.append(cvt_rgb)

del img_list[0]

savefilepath = f'./result/pdf/{save_NAME}'
try:
    if not os.path.exists(savefilepath):
        os.makedirs(savefilepath)
except OSError:
    print(f'Error: Cannot Find Select Directory: {savefilepath}')

cvt_rgb_0.save(f'{savefilepath}/{save_NAME}.pdf', save_all=True, append_images=img_list)
print("End of PDF Generator!!")

"""## 5. 사진 파일 삭제"""

shutil.rmtree(save_DIR, ignore_errors=True)
print("사진 제거")
print("강의 요약 완료")